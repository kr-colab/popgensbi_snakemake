import os

# Configuration should be provided in a config.yaml file
# Example config.yaml:
# vcf_path: "path/to/your.vcf"
# window_size: 1000
# output_dir: "results"

rule all:
    input:
        os.path.join(config["output_dir"], "done.txt")  # A sentinel file to mark completion

rule prepare_vcf:
    input:
        vcf = config["vcf_path"]
    output:
        vcf_gz = temp(os.path.join(config["output_dir"], "{vcf}.gz")),
        vcf_gz_tbi = os.path.join(config["output_dir"], "{vcf}.gz.tbi"),
        zarr = directory(os.path.join(config["output_dir"], "{vcf}.vcz"))
    shell:
        """
        mkdir -p {config[output_dir]}
        bgzip -c {input.vcf} > {output.vcf_gz}
        tabix -p vcf {output.vcf_gz}
        vcf2zarr explode -p 4 -f {output.vcf_gz} {config[output_dir]}/{wildcards.vcf}.icf
        vcf2zarr encode -p 4 -f {config[output_dir]}/{wildcards.vcf}.icf {output.zarr}
        #rm -f {config[output_dir]}/{wildcards.vcf}.icf
        """

rule infer_windowed_trees:
    input:
        vcf = config["vcf_path"],
        zarr = os.path.join(config["output_dir"], os.path.basename(config["vcf_path"]) + ".vcz")
    output:
        done = os.path.join(config["output_dir"], "done.txt")
    params:
        window_size = config["window_size"],
        output_dir = config["output_dir"],
        window_type = config["window_type"],
        report = config["report"]
    threads:
        4
    script:
        "infer_window_ts.py"